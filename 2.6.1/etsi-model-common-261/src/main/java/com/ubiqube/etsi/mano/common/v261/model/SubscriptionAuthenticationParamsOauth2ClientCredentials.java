/**
 * Copyright (C) 2019-2025 Ubiqube.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
package com.ubiqube.etsi.mano.common.v261.model;

import java.util.Objects;

import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.media.Schema.RequiredMode;


/**
 * Parameters for authentication/authorization using OAUTH2_CLIENT_CREDENTIALS.
 * Shall be present if authType is \&quot;OAUTH2_CLIENT_CREDENTIALS\&quot; and
 * the contained information has not been provisioned out of band. Shall be
 * absent otherwise.
 */
@Schema(description = "Parameters for authentication/authorization using OAUTH2_CLIENT_CREDENTIALS. Shall be present if authType is \"OAUTH2_CLIENT_CREDENTIALS\" and the contained information has not been provisioned out of band. Shall be absent otherwise. ")
@Validated
public class SubscriptionAuthenticationParamsOauth2ClientCredentials {
	@JsonProperty("clientId")
	private String clientId = null;

	@JsonProperty("clientPassword")
	private String clientPassword = null;

	@JsonProperty("tokenEndpoint")
	private String tokenEndpoint = null;

	public SubscriptionAuthenticationParamsOauth2ClientCredentials clientId(final String clientId) {
		this.clientId = clientId;
		return this;
	}

	/**
	 * Client identifier to be used in the access token request of the OAuth 2.0
	 * client credentials grant type. Shall be present if it has not been
	 * provisioned out of band. The clientId and clientPassword passed in a
	 * subscription shall not be the same as the clientId and clientPassword that
	 * are used to obtain authorization for API requests. Client credentials may
	 * differ between subscriptions. The value of clientPassword should be generated
	 * by a random process.
	 *
	 * @return clientId
	 **/
	@Schema(description = "Client identifier to be used in the access token request of the OAuth 2.0 client credentials grant type. Shall be present if it has not been provisioned out of band. The clientId and clientPassword passed in a subscription shall not be the same as the clientId and clientPassword that are used to obtain authorization for API requests. Client credentials may differ between subscriptions. The value of clientPassword should be generated by a random process. ")

	public String getClientId() {
		return clientId;
	}

	public void setClientId(final String clientId) {
		this.clientId = clientId;
	}

	public SubscriptionAuthenticationParamsOauth2ClientCredentials clientPassword(final String clientPassword) {
		this.clientPassword = clientPassword;
		return this;
	}

	/**
	 * Client password to be used in the access token request of the OAuth 2.0
	 * client credentials grant type. Shall be present if it has not been
	 * provisioned out of band. The clientId and clientPassword passed in a
	 * subscription shall not be the same as the clientId and clientPassword that
	 * are used to obtain authorization for API requests. Client credentials may
	 * differ between subscriptions. The value of clientPassword should be generated
	 * by a random process.
	 *
	 * @return clientPassword
	 **/
	@Schema(description = "Client password to be used in the access token request of the OAuth 2.0 client credentials grant type. Shall be present if it has not been provisioned out of band. The clientId and clientPassword passed in a subscription shall not be the same as the clientId and clientPassword that are used to obtain authorization for API requests. Client credentials may differ between subscriptions. The value of clientPassword should be generated by a random process. ")

	public String getClientPassword() {
		return clientPassword;
	}

	public void setClientPassword(final String clientPassword) {
		this.clientPassword = clientPassword;
	}

	public SubscriptionAuthenticationParamsOauth2ClientCredentials tokenEndpoint(final String tokenEndpoint) {
		this.tokenEndpoint = tokenEndpoint;
		return this;
	}

	/**
	 * The token endpoint from which the access token can be obtained. Shall be
	 * present if it has not been provisioned out of band.
	 *
	 * @return tokenEndpoint
	 **/
	@Schema(description = "The token endpoint from which the access token can be obtained. Shall be present if it has not been provisioned out of band. ")

	public String getTokenEndpoint() {
		return tokenEndpoint;
	}

	public void setTokenEndpoint(final String tokenEndpoint) {
		this.tokenEndpoint = tokenEndpoint;
	}

	@Override
	public boolean equals(final java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if ((o == null) || (getClass() != o.getClass())) {
			return false;
		}
		final SubscriptionAuthenticationParamsOauth2ClientCredentials subscriptionAuthenticationParamsOauth2ClientCredentials = (SubscriptionAuthenticationParamsOauth2ClientCredentials) o;
		return Objects.equals(this.clientId, subscriptionAuthenticationParamsOauth2ClientCredentials.clientId) &&
				Objects.equals(this.clientPassword, subscriptionAuthenticationParamsOauth2ClientCredentials.clientPassword) &&
				Objects.equals(this.tokenEndpoint, subscriptionAuthenticationParamsOauth2ClientCredentials.tokenEndpoint);
	}

	@Override
	public int hashCode() {
		return Objects.hash(clientId, clientPassword, tokenEndpoint);
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append("class SubscriptionAuthenticationParamsOauth2ClientCredentials {\n");

		sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
		sb.append("    clientPassword: ").append(toIndentedString(clientPassword)).append("\n");
		sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(final java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}
